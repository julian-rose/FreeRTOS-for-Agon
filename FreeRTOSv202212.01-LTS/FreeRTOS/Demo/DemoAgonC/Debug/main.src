; Zilog eZ80 ANSI C Compiler Release 3.4
; -noglobalopt -nolocalcse -optsize -nomodsect -reduceopt
; -nopadbranch -debug -peephole -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "HeapRegion",6
.DEFINE "pucStartAddress"
.VALUE 0
.CLASS 8
.TYPE 44
.ENDEF
.DEFINE "xSizeInBytes"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "HeapRegion"
.BEGREC "xHeapStats",21
.DEFINE "xAvailableHeapSpaceInBytes"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xSizeOfLargestFreeBlockInBytes"
.VALUE 3
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xSizeOfSmallestFreeBlockInBytes"
.VALUE 6
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xNumberOfFreeBlocks"
.VALUE 9
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xMinimumEverFreeBytesRemaining"
.VALUE 12
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xNumberOfSuccessfulAllocations"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "xNumberOfSuccessfulFrees"
.VALUE 18
.CLASS 8
.TYPE 14
.ENDEF
.ENDREC "xHeapStats"
.BEGREC "xSTATIC_LIST_ITEM",16
.DEFINE "xDummy2"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pvDummy3"
.VALUE 4
.CLASS 8
.DIM 4
.TYPE 353
.ENDEF
.ENDREC "xSTATIC_LIST_ITEM"
.BEGREC "xSTATIC_MINI_LIST_ITEM",10
.DEFINE "xDummy2"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pvDummy3"
.VALUE 4
.CLASS 8
.DIM 2
.TYPE 353
.ENDEF
.ENDREC "xSTATIC_MINI_LIST_ITEM"
.BEGREC "xSTATIC_LIST",16
.DEFINE "uxDummy2"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "pvDummy3"
.VALUE 3
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "xDummy4"
.VALUE 6
.CLASS 8
.TAG "xSTATIC_MINI_LIST_ITEM"
.TYPE 8
.ENDEF
.ENDREC "xSTATIC_LIST"
.BEGREC "xSTATIC_TCB",69
.DEFINE "pxDummy1"
.VALUE 0
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "xDummy3"
.VALUE 3
.CLASS 8
.DIM 2
.TAG "xSTATIC_LIST_ITEM"
.TYPE 104
.ENDEF
.DEFINE "uxDummy5"
.VALUE 35
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "pxDummy6"
.VALUE 38
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "ucDummy7"
.VALUE 41
.CLASS 8
.DIM 16
.TYPE 108
.ENDEF
.DEFINE "uxDummy12"
.VALUE 57
.CLASS 8
.DIM 2
.TYPE 110
.ENDEF
.DEFINE "ulDummy18"
.VALUE 63
.CLASS 8
.DIM 1
.TYPE 111
.ENDEF
.DEFINE "ucDummy19"
.VALUE 67
.CLASS 8
.DIM 1
.TYPE 108
.ENDEF
.DEFINE "ucDummy21"
.VALUE 68
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "xSTATIC_TCB"
.BEGREC "xSTATIC_QUEUE",55
.DEFINE "pvDummy1"
.VALUE 0
.CLASS 8
.DIM 3
.TYPE 353
.ENDEF
.DEFINE "u"
.VALUE 9
.CLASS 8
.TAG "NONAME0"
.TYPE 8
.ENDEF
.DEFINE "xDummy3"
.VALUE 12
.CLASS 8
.DIM 2
.TAG "xSTATIC_LIST"
.TYPE 104
.ENDEF
.DEFINE "uxDummy4"
.VALUE 44
.CLASS 8
.DIM 3
.TYPE 110
.ENDEF
.DEFINE "ucDummy5"
.VALUE 53
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.ENDREC "xSTATIC_QUEUE"
.BEGREC "NONAME0",3
.DEFINE "pvDummy2"
.VALUE 0
.CLASS 11
.TYPE 33
.ENDEF
.DEFINE "uxDummy2"
.VALUE 0
.CLASS 11
.TYPE 14
.ENDEF
.ENDREC "NONAME0"
.BEGREC "xSTATIC_EVENT_GROUP",20
.DEFINE "xDummy1"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "xDummy2"
.VALUE 4
.CLASS 8
.TAG "xSTATIC_LIST"
.TYPE 8
.ENDEF
.ENDREC "xSTATIC_EVENT_GROUP"
.BEGREC "xSTATIC_TIMER",30
.DEFINE "pvDummy1"
.VALUE 0
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "xDummy2"
.VALUE 3
.CLASS 8
.TAG "xSTATIC_LIST_ITEM"
.TYPE 8
.ENDEF
.DEFINE "xDummy3"
.VALUE 19
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pvDummy5"
.VALUE 23
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "pvDummy6"
.VALUE 26
.CLASS 8
.TYPE 545
.ENDEF
.DEFINE "ucDummy8"
.VALUE 29
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "xSTATIC_TIMER"
.BEGREC "xSTATIC_STREAM_BUFFER",22
.DEFINE "uxDummy1"
.VALUE 0
.CLASS 8
.DIM 4
.TYPE 110
.ENDEF
.DEFINE "pvDummy2"
.VALUE 12
.CLASS 8
.DIM 3
.TYPE 353
.ENDEF
.DEFINE "ucDummy3"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "xSTATIC_STREAM_BUFFER"
.BEGREC "xLIST_ITEM",16
.DEFINE "xItemValue"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pxNext"
.VALUE 4
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 40
.ENDEF
.DEFINE "pxPrevious"
.VALUE 7
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 40
.ENDEF
.DEFINE "pvOwner"
.VALUE 10
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "pvContainer"
.VALUE 13
.CLASS 8
.TAG "xLIST"
.TYPE 40
.ENDEF
.ENDREC "xLIST_ITEM"
.BEGREC "xMINI_LIST_ITEM",10
.DEFINE "xItemValue"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pxNext"
.VALUE 4
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 40
.ENDEF
.DEFINE "pxPrevious"
.VALUE 7
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 40
.ENDEF
.ENDREC "xMINI_LIST_ITEM"
.BEGREC "xLIST",16
.DEFINE "uxNumberOfItems"
.VALUE 0
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "pxIndex"
.VALUE 3
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 40
.ENDEF
.DEFINE "xListEnd"
.VALUE 6
.CLASS 8
.TAG "xMINI_LIST_ITEM"
.TYPE 8
.ENDEF
.ENDREC "xLIST"
.BEGREC "xTIME_OUT",7
.DEFINE "xOverflowCount"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "xTimeOnEntering"
.VALUE 3
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "xTIME_OUT"
.BEGREC "xMEMORY_REGION",11
.DEFINE "pvBaseAddress"
.VALUE 0
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "ulLengthInBytes"
.VALUE 3
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "ulParameters"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "xMEMORY_REGION"
.BEGREC "xTASK_PARAMETERS",29
.DEFINE "pvTaskCode"
.VALUE 0
.CLASS 8
.TYPE 545
.ENDEF
.DEFINE "pcName"
.VALUE 3
.CLASS 8
.TYPE 194
.ENDEF
.DEFINE "usStackDepth"
.VALUE 6
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "pvParameters"
.VALUE 9
.CLASS 8
.TYPE 33
.ENDEF
.DEFINE "uxPriority"
.VALUE 12
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "puxStackBuffer"
.VALUE 15
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "xRegions"
.VALUE 18
.CLASS 8
.DIM 1
.TAG "xMEMORY_REGION"
.TYPE 104
.ENDEF
.ENDREC "xTASK_PARAMETERS"
.BEGREC "xTASK_STATUS",28
.DEFINE "xHandle"
.VALUE 0
.CLASS 8
.TAG "~tag"
.TYPE 40
.ENDEF
.DEFINE "pcTaskName"
.VALUE 3
.CLASS 8
.TYPE 194
.ENDEF
.DEFINE "xTaskNumber"
.VALUE 6
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "eCurrentState"
.VALUE 9
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "uxCurrentPriority"
.VALUE 12
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "uxBasePriority"
.VALUE 15
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "ulRunTimeCounter"
.VALUE 18
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "pxStackBase"
.VALUE 22
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "usStackHighWaterMark"
.VALUE 25
.CLASS 8
.TYPE 4
.ENDEF
.ENDREC "xTASK_STATUS"
.BEGREC "corCoRoutineControlBlock",43
.DEFINE "pxCoRoutineFunction"
.VALUE 0
.CLASS 8
.TYPE 545
.ENDEF
.DEFINE "xGenericListItem"
.VALUE 3
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 8
.ENDEF
.DEFINE "xEventListItem"
.VALUE 19
.CLASS 8
.TAG "xLIST_ITEM"
.TYPE 8
.ENDEF
.DEFINE "uxPriority"
.VALUE 35
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "uxIndex"
.VALUE 38
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "uxState"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "corCoRoutineControlBlock"
	SEGMENT DATA
_idlecnt:
	DW	0
	DB	0
.DEFINE "idlecnt"
.ALIAS "_idlecnt"
.CLASS 69
.VALUE _idlecnt
.TYPE 14
.ENDEF
;    1	/*
;    2	 * FreeRTOS Kernel V10.5.1
;    3	 * Copyright (C) 2024 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
;    4	 *
;    5	 * SPDX-License-Identifier: MIT
;    6	 *
;    7	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
;    8	 * this software and associated documentation files (the "Software"), to deal in
;    9	 * the Software without restriction, including without limitation the rights to
;   10	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
;   11	 * the Software, and to permit persons to whom the Software is furnished to do so,
;   12	 * subject to the following conditions:
;   13	 *
;   14	 * The above copyright notice and this permission notice shall be included in all
;   15	 * copies or substantial portions of the Software.
;   16	 *
;   17	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;   18	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
;   19	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
;   20	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
;   21	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
;   22	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;   23	 *
;   24	 * https://www.FreeRTOS.org
;   25	 * https://github.com/FreeRTOS
;   26	 *
;   27	 *  Please ensure to read the configuration and relevant port sections of the
;   28	 *  online documentation.
;   29	 *
;   30	 *  http://www.FreeRTOS.org - Documentation, latest information, license and
;   31	 *  contact details.
;   32	 *
;   33	 *  Demo application for EZ80 Agon Light
;   34	*/
;   35	
;   36	#include <stdio.h>
;   37	
;   38	#include "FreeRTOS.h"
;   39	#include "task.h"
;   40	#include "croutine.h"
;   41	
;   42	
;   43	extern unsigned int _heaptop;  // defined in the linker directive file
;   44	extern unsigned int _heapbot;  //   "
;   45	
;   46	static unsigned int idlecnt = 0;
	SEGMENT CODE
;   47	
;   48	
;   49	void Task1( void *pvParameters );
;   50	void Task2( void *pvParameters );
;   51	void vApplicationIdleHook( void );
;   52	
;   53	
;   54	int main( void )
;   55	{
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",55,"_main"

.LINE 55

.DEFINE "tskcnt"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "r"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;   56		BaseType_t r;
;   57		int tskcnt = 2;
.LINE 57

	LD	BC,2
	LD	(IX+%FFFFFFFD),BC
;   58	
;   59	#	if defined( _DEBUG )
;   60		{
;   61			( void )printf( "main %d\r\n", __LINE__ );
.LINE 61

	LD	BC,61
	PUSH	BC
	LD	BC,L__0
	PUSH	BC
	LD	(IX+%FFFFFFF9),A
	CALL	_printf
	LD	A,(IX+%FFFFFFF9)
	POP	BC
	POP	BC
;   62			( void )printf( "&_heaptop = 0x%p\r\n", &_heaptop );
.LINE 62

	LD	BC,__heaptop
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	LD	(IX+%FFFFFFF9),A
	CALL	_printf
	LD	A,(IX+%FFFFFFF9)
	POP	BC
	POP	BC
;   63			( void )printf( "&_heapbot = 0x%p\r\n", &_heapbot );
.LINE 63

	LD	BC,__heapbot
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	LD	(IX+%FFFFFFF9),A
	CALL	_printf
	LD	A,(IX+%FFFFFFF9)
	POP	BC
	POP	BC
;   64			( void )printf( "Heap size 0x%x\r\n", configTOTAL_HEAP_SIZE );
.LINE 64

	LD	HL,__heaptop
	LD	BC,__heapbot
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,L__3
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;   65		}
;   66	#	endif
;   67	
;   68	    /* Create the sample tasks. */
;   69	    r = xTaskCreate( Task1, "Task1", configMINIMAL_STACK_SIZE, (void *)10, tskIDLE_PRIORITY + 2, NULL );
.LINE 69

	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,L__4
	PUSH	BC
	LD	BC,_Task1
	PUSH	BC
	CALL	_xTaskCreate
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFA),HL
;   70		if( pdPASS != r )
.LINE 70

	LD	BC,1
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_2
;   71		{
;   72			tskcnt--;
.LINE 72

	LD	BC,(IX+%FFFFFFFD)
	DEC	BC
	LD	(IX+%FFFFFFFD),BC
;   73			( void )printf( "Failed to allocate Task1: %d\r\n", r );
.LINE 73

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,L__6
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;   74		}
L_2:
.LINE 74

;   75	
;   76		r = xTaskCreate( Task2, "Task2", configMINIMAL_STACK_SIZE, (void *)3,  tskIDLE_PRIORITY + 2, NULL );
.LINE 76

	LD	BC,0
	PUSH	BC
	LD	BC,2
	PUSH	BC
	LD	BC,3
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,L__7
	PUSH	BC
	LD	BC,_Task2
	PUSH	BC
	CALL	_xTaskCreate
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+%FFFFFFFA),HL
;   77		if( pdPASS != r )
.LINE 77

	LD	BC,1
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_6
;   78		{
;   79			tskcnt--;
.LINE 79

	LD	BC,(IX+%FFFFFFFD)
	DEC	BC
	LD	(IX+%FFFFFFFD),BC
;   80			( void )printf( "Failed to allocate Task2: %d\r\n", r );
.LINE 80

	LD	BC,(IX+%FFFFFFFA)
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	CALL	_printf
	POP	BC
	POP	BC
;   81		}
L_6:
.LINE 81

;   82	
;   83		if( 2 == tskcnt )
.LINE 83

	LD	BC,2
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_7
;   84		{
;   85			/* Start FreeRTOS */
;   86			( void )printf( "\r\nEntering scheduler\r\n" );
.LINE 86

	LD	BC,L__11
	PUSH	BC
	CALL	_printf
	POP	BC
;   87				
;   88			vTaskStartScheduler( );
.LINE 88

	CALL	_vTaskStartScheduler
;   89			
;   90			// should never get here
;   91			( void )printf( "Back from scheduler\r\n" );
.LINE 91

	LD	BC,L__12
	PUSH	BC
	CALL	_printf
	POP	BC
;   92		}
L_7:
.LINE 92

;   93	
;   94	    return( 0 );
.LINE 94

	OR	A,A
	SBC	HL,HL
;   95	}
.LINE 95

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_vTaskStartScheduler                IMPORT  -----   function
;_Task2                              IMPORT  -----   function
;_Task1                              IMPORT  -----   function
;_xTaskCreate                        IMPORT  -----   function
;__heapbot                           IMPORT      3   variable
;__heaptop                           IMPORT      3   variable
;_printf                             IMPORT  -----   function
;r                                     IX-6      3   variable
;tskcnt                                IX-3      3   variable


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",95,"_main"
	SEGMENT STRSECT
L__0:
	DB	"main %d"
	DB	13,10,0
L__1:
	DB	"&_heaptop = 0x%p"
	DB	13,10,0
L__2:
	DB	"&_heapbot = 0x%p"
	DB	13,10,0
L__3:
	DB	"Heap size 0x%x"
	DB	13,10,0
L__4:
	DB	"Task1"
	DB	0
L__6:
	DB	"Failed to allocate Task1: %d"
	DB	13,10,0
L__7:
	DB	"Task2"
	DB	0
L__9:
	DB	"Failed to allocate Task2: %d"
	DB	13,10,0
L__11:
	DB	13,10
	DB	"Entering scheduler"
	DB	13,10,0
L__12:
	DB	"Back from scheduler"
	DB	13,10,0
	SEGMENT CODE
;   96	
;   97	
;   98	void Task1( void *pvParameters )
;   99	{
_Task1:
.DEFINE "_Task1"

.VALUE _Task1

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "Task1",99,"_Task1"

.LINE 99

.DEFINE "pvParameters"

.CLASS 65

.VALUE 6

.TYPE 33

.ENDEF

.DEFINE "ch"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "cnt"

.CLASS 65

.VALUE -4

.TYPE 4

.ENDEF

.DEFINE "ticks"

.CLASS 65

.VALUE -7

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  100	    int ticks =( int )pvParameters;
.LINE 100

	LD	BC,(IX+%6)
	LD	(IX+%FFFFFFF9),BC
;  101		int cnt = 0;
.LINE 101

	LD	BC,0
	LD	(IX+%FFFFFFFC),BC
;  102		char ch = 'A';
.LINE 102

	LD	(IX+%FFFFFFFF),%41
;  103	
;  104		( void )printf( "\r\nStarting Task1\r\n" );
.LINE 104

	LD	BC,L__14
	PUSH	BC
	CALL	_printf
	POP	BC
;  105	    while( 1 )
L_14:
.LINE 105

;  106	    {
;  107			portEnterMOS( );
.LINE 107

	CALL	_portEnterMOS
;  108	        putchar( ch );
.LINE 108

	LD	A,(IX+%FFFFFFFF)
	SEXT	HL
	LD	L,(IX+%FFFFFFFF)
	PUSH	HL
	CALL	_putchar
	POP	BC
;  109			portExitMOS( );
.LINE 109

	CALL	_portExitMOS
;  110	
;  111			if( 0 ==( cnt++ % 64 ))
.LINE 111

	LD	HL,(IX+%FFFFFFFC)
	LD	BC,(IX+%FFFFFFFC)
	INC	BC
	LD	(IX+%FFFFFFFC),BC
	LD	BC,64
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_14
;  112			{
;  113				if( 'A' == ch )
.LINE 113

	LD	A,(IX+%FFFFFFFF)
	CP	A,%41
	JR	NZ,L_11
;  114					ch = 'a';
.LINE 114

	LD	(IX+%FFFFFFFF),%61
;  115				else
.LINE 115

	JR	L_12
L_11:
;  116					ch = 'A';
.LINE 116

	LD	(IX+%FFFFFFFF),%41
L_12:
;  117				
;  118				portYIELD( );
.LINE 118

	CALL	_vPortYield
;  119			}
;  120	    }
.LINE 120

	JR	L_14
;  121	}
.LINE 121

	LD	SP,IX
	POP	IX
	RET	


;**************************** _Task1 ***************************
;Name                         Addr/Register   Size   Type
;_vPortYield                         IMPORT  -----   function
;_portExitMOS                        IMPORT  -----   function
;_putchar                            IMPORT  -----   function
;_portEnterMOS                       IMPORT  -----   function
;_printf                             IMPORT  -----   function
;ticks                                 IX-7      3   variable
;cnt                                   IX-4      3   variable
;ch                                    IX-1      1   variable
;pvParameters                          IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "Task1",121,"_Task1"
	SEGMENT STRSECT
L__14:
	DB	13,10
	DB	"Starting Task1"
	DB	13,10,0
	SEGMENT CODE
;  122	
;  123	
;  124	void Task2( void *pvParameters )
;  125	{
_Task2:
.DEFINE "_Task2"

.VALUE _Task2

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "Task2",125,"_Task2"

.LINE 125

.DEFINE "pvParameters"

.CLASS 65

.VALUE 6

.TYPE 33

.ENDEF

.DEFINE "ch"

.CLASS 65

.VALUE -1

.TYPE 2

.ENDEF

.DEFINE "cnt"

.CLASS 65

.VALUE -4

.TYPE 4

.ENDEF

.DEFINE "ticks"

.CLASS 65

.VALUE -7

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
	DEC	SP
;  126	    int ticks =( int )pvParameters;
.LINE 126

	LD	BC,(IX+%6)
	LD	(IX+%FFFFFFF9),BC
;  127		int cnt = 0;
.LINE 127

	LD	BC,0
	LD	(IX+%FFFFFFFC),BC
;  128		char ch = 'B';
.LINE 128

	LD	(IX+%FFFFFFFF),%42
;  129	
;  130		( void )printf( "\r\nStarting Task2\r\n" );
.LINE 130

	LD	BC,L__18
	PUSH	BC
	CALL	_printf
	POP	BC
;  131	    while( 1 )
L_22:
.LINE 131

;  132	    {
;  133			portEnterMOS( );
.LINE 133

	CALL	_portEnterMOS
;  134	        putchar( ch );
.LINE 134

	LD	A,(IX+%FFFFFFFF)
	SEXT	HL
	LD	L,(IX+%FFFFFFFF)
	PUSH	HL
	CALL	_putchar
	POP	BC
;  135			portExitMOS( );
.LINE 135

	CALL	_portExitMOS
;  136	
;  137			if( 0 ==( cnt++ % 128 ))
.LINE 137

	LD	HL,(IX+%FFFFFFFC)
	LD	BC,(IX+%FFFFFFFC)
	INC	BC
	LD	(IX+%FFFFFFFC),BC
	LD	BC,128
	CALL	__irems
	CALL	__icmpzero
	JR	NZ,L_22
;  138			{
;  139				if( 'B' == ch )
.LINE 139

	LD	A,(IX+%FFFFFFFF)
	CP	A,%42
	JR	NZ,L_19
;  140					ch = 'b';
.LINE 140

	LD	(IX+%FFFFFFFF),%62
;  141				else
.LINE 141

	JR	L_20
L_19:
;  142					ch = 'B';
.LINE 142

	LD	(IX+%FFFFFFFF),%42
L_20:
;  143				
;  144				portYIELD( );
.LINE 144

	CALL	_vPortYield
;  145			}
;  146	    }
.LINE 146

	JR	L_22
;  147	}
.LINE 147

	LD	SP,IX
	POP	IX
	RET	


;**************************** _Task2 ***************************
;Name                         Addr/Register   Size   Type
;_vPortYield                         IMPORT  -----   function
;_portExitMOS                        IMPORT  -----   function
;_putchar                            IMPORT  -----   function
;_portEnterMOS                       IMPORT  -----   function
;_printf                             IMPORT  -----   function
;ticks                                 IX-7      3   variable
;cnt                                   IX-4      3   variable
;ch                                    IX-1      1   variable
;pvParameters                          IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "Task2",147,"_Task2"
	SEGMENT STRSECT
L__18:
	DB	13,10
	DB	"Starting Task2"
	DB	13,10,0
	SEGMENT CODE
;  148	
;  149	
;  150	void vApplicationIdleHook( void )
;  151	{
_vApplicationIdleHook:
.DEFINE "_vApplicationIdleHook"

.VALUE _vApplicationIdleHook

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "vApplicationIdleHook",151,"_vApplicationIdleHook"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;  152		/* DO NOT call a BLOCKING function from within the IDLE task;
;  153	       IDLE must always be in either the READY or the RUN state, and no other. */
;  154		
;  155		//Machen mit ein blinken light would be excellent
;  156	
;  157		idlecnt++;
.LINE 157

	LD	BC,(_idlecnt)
	INC	BC
	LD	(_idlecnt),BC
;  158	}
.LINE 158

	LD	SP,IX
	POP	IX
	RET	


;**************************** _vApplicationIdleHook ***************************
;Name                         Addr/Register   Size   Type
;_idlecnt                            STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "vApplicationIdleHook",158,"_vApplicationIdleHook"
	XREF __heapbot:ROM
	XREF __heaptop:ROM
	XREF _vTaskStartScheduler:ROM
	XREF _xTaskCreate:ROM
	XREF _vPortYield:ROM
	XREF _portExitMOS:ROM
	XREF _portEnterMOS:ROM
	XREF _putchar:ROM
	XREF _printf:ROM
	XREF __irems:ROM
	XREF __icmpzero:ROM
	XDEF _vApplicationIdleHook
	XDEF _Task2
	XDEF _Task1
	XDEF _main
	END
